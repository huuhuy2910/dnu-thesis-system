import React from "react";
import {
  Users,
  BookOpen,
  FileText,
  CalendarDays,
  Bell,
  TrendingUp,
  Shield,
} from "lucide-react";
import "./Dashboard.css";

// ==========================================
// MOCK DATA - D·ªØ li·ªáu m·∫´u ƒë·ªÉ minh h·ªça
// Sau n√†y thay b·∫±ng API th·ª±c t·ª´ backend
// ==========================================

interface StatCard {
  label: string;
  value: number;
  icon: React.ReactNode;
  color: "orange" | "blue" | "green" | "purple";
}

interface ChartData {
  label: string;
  value: number;
  color: string;
  colorLight: string;
}

interface RecentTopic {
  title: string;
  student: string;
  lecturer: string;
  status: "in-progress" | "pending" | "approved";
  statusText: string;
}

interface Notification {
  title: string;
  desc: string;
  date: string;
}

// Mock Stats Data - N√¢ng c·∫•p v·ªõi s·ªë li·ªáu nghi√™m t√∫c h∆°n
const mockStats: StatCard[] = [
  {
    label: "T·ªîNG S·ªê SINH VI√äN",
    value: 487,
    icon: <Users size={28} />,
    color: "orange",
  },
  {
    label: "ƒê·ªÄ T√ÄI ƒêANG TH·ª∞C HI·ªÜN",
    value: 67,
    icon: <BookOpen size={28} />,
    color: "blue",
  },
  {
    label: "B√ÅO C√ÅO TU·∫¶N N√ÄY",
    value: 189,
    icon: <FileText size={28} />,
    color: "green",
  },
  {
    label: "L·ªäCH B·∫¢O V·ªÜ S·∫ÆP T·ªöI",
    value: 12,
    icon: <CalendarDays size={28} />,
    color: "purple",
  },
];

// Mock Chart Data - Ti·∫øn ƒë·ªô ho√†n th√†nh ƒë·ªì √°n (Nghi√™m t√∫c h∆°n)
const mockChartData: ChartData[] = [
  {
    label: "ƒêANG TH·ª∞C HI·ªÜN",
    value: 67,
    color: "#f37021",
    colorLight: "#ff9a56",
  },
  {
    label: "ƒê√É HO√ÄN TH√ÄNH",
    value: 42,
    color: "#002855",
    colorLight: "#004080",
  },
  { label: "QU√Å H·∫†N", value: 23, color: "#002855", colorLight: "#004080" },
  { label: "CH·ªú DUY·ªÜT", value: 18, color: "#002855", colorLight: "#004080" },
];

// Mock Recent Topics Data - D·ªØ li·ªáu nghi√™m t√∫c h∆°n
const mockRecentTopics: RecentTopic[] = [
  {
    title: "H·ªÜ TH·ªêNG QU·∫¢N L√ù AN NINH M·∫†NG DOANH NGHI·ªÜP",
    student: "Nguy·ªÖn VƒÉn ƒê·ª©c (SV2024001)",
    lecturer: "PGS.TS Tr·∫ßn Minh H√≤a",
    status: "in-progress",
    statusText: "ƒêANG TH·ª∞C HI·ªÜN",
  },
  {
    title: "·ª®NG D·ª§NG AI TRONG PH√ÇN T√çCH D·ªÆ LI·ªÜU L·ªöN",
    student: "Tr·∫ßn Th·ªã Lan (SV2024002)",
    lecturer: "TS. Nguy·ªÖn Thu H√†",
    status: "pending",
    statusText: "CH·ªú DUY·ªÜT",
  },
  {
    title: "T·ªêI ∆ØU H√ìA C∆† S·ªû D·ªÆ LI·ªÜU PH√ÇN T√ÅN",
    student: "L√™ VƒÉn T√πng (SV2024003)",
    lecturer: "ThS. Ph·∫°m Anh D≈©ng",
    status: "approved",
    statusText: "ƒê√É DUY·ªÜT",
  },
  {
    title: "H·ªÜ TH·ªêNG IOT CHO NH√Ä TH√îNG MINH",
    student: "Ho√†ng Th·ªã Mai (SV2024004)",
    lecturer: "TS. Tr·∫ßn Minh H√≤a",
    status: "in-progress",
    statusText: "ƒêANG TH·ª∞C HI·ªÜN",
  },
  {
    title: "PH√ÅT TRI·ªÇN ·ª®NG D·ª§NG DI ƒê·ªòNG CHO GI√ÅO D·ª§C",
    student: "Ph·∫°m VƒÉn H√πng (SV2024005)",
    lecturer: "ThS. L√™ Thanh T√πng",
    status: "pending",
    statusText: "CH·ªú DUY·ªÜT",
  },
];

// Mock Notifications Data - Th√¥ng b√°o nghi√™m t√∫c h∆°n
const mockNotifications: Notification[] = [
  {
    title: "H·ªòI ƒê·ªíNG B·∫¢O V·ªÜ K·ª≤ 2025.2",
    desc: "D·ª± ki·∫øn t·ªï ch·ª©c t·ª´ 15/12/2025 - 20/12/2025",
    date: "07/10/2025",
  },
  {
    title: "H·∫†N N·ªòP B√ÅO C√ÅO TI·∫æN ƒê·ªò TH√ÅNG 10",
    desc: "T·∫•t c·∫£ sinh vi√™n ph·∫£i n·ªôp b√°o c√°o tr∆∞·ªõc 23:59 ng√†y 25/10/2025",
    date: "06/10/2025",
  },
  {
    title: "CU·ªòC H·ªåP H·ªòI ƒê·ªíNG X√âT DUY·ªÜT ƒê·ªÄ T√ÄI",
    desc: "L·ªãch h·ªçp ng√†y 12/10/2025 t·∫°i ph√≤ng A101",
    date: "05/10/2025",
  },
  {
    title: "TH√îNG B√ÅO V·ªÄ QUY TR√åNH B·∫¢O V·ªÜ",
    desc: "C·∫≠p nh·∫≠t quy tr√¨nh b·∫£o v·ªá lu·∫≠n vƒÉn t·ªët nghi·ªáp 2025",
    date: "04/10/2025",
  },
  {
    title: "H·∫†N CU·ªêI ƒêƒÇNG K√ù ƒê·ªÄ T√ÄI",
    desc: "Sinh vi√™n ch∆∞a ƒëƒÉng k√Ω ƒë·ªÅ t√†i vui l√≤ng ho√†n th√†nh tr∆∞·ªõc 15/10/2025",
    date: "03/10/2025",
  },
];

const Dashboard: React.FC = () => {
  // Calculate max value for chart scaling
  const maxChartValue = Math.max(...mockChartData.map((d) => d.value));

  return (
    <div className="admin-dashboard">
      {/* Dashboard Header */}
      <div className="dashboard-header">
        <h1>
          <Shield size={40} style={{ marginRight: 16 }} />
          B·∫¢NG ƒêI·ªÄU KHI·ªÇN QU·∫¢N TR·ªä VI√äN
        </h1>
        <p>T·ªîNG QUAN HO·∫†T ƒê·ªòNG V√Ä D·ªÆ LI·ªÜU H·ªÜ TH·ªêNG ƒê·ªí √ÅN T·ªêT NGHI·ªÜP</p>
      </div>

      {/* Stats Cards Grid */}
      <div className="stats-grid">
        {mockStats.map((stat, index) => (
          <div key={index} className={`stat-card ${stat.color}`}>
            <div className="stat-card-header">
              <div className={`stat-card-icon ${stat.color}`}>{stat.icon}</div>
            </div>
            <div className="stat-card-label">{stat.label}</div>
            <div className="stat-card-value">{stat.value.toLocaleString()}</div>
          </div>
        ))}
      </div>

      {/* Content Grid: Chart + Notifications */}
      <div className="dashboard-content">
        {/* Progress Chart Section */}
        <div className="chart-section">
          <h2>
            <TrendingUp
              size={24}
              style={{ marginRight: 12, color: "#f37021" }}
            />
            TI·∫æN ƒê·ªò HO√ÄN TH√ÄNH ƒê·ªí √ÅN (D·ªÆ LI·ªÜU M·∫™U)
          </h2>
          <div className="chart-container">
            <div className="bar-chart">
              {mockChartData.map((item, index) => (
                <div key={index} className="bar-item">
                  <div
                    className="bar"
                    style={
                      {
                        height: `${(item.value / maxChartValue) * 100}%`,
                        "--bar-color": item.color,
                        "--bar-color-light": item.colorLight,
                      } as React.CSSProperties
                    }
                  >
                    <div className="bar-value">{item.value}</div>
                  </div>
                  <div className="bar-label">{item.label}</div>
                </div>
              ))}
            </div>
          </div>
          <div className="chart-note">
            üìä D·ªÆ LI·ªÜU MINH H·ªåA - S·∫º THAY B·∫∞NG API TH·ª∞C SAU
          </div>
        </div>

        {/* Notifications Section */}
        <div className="notifications-section">
          <h2>
            <Bell size={24} style={{ color: "#f37021" }} />
            TH√îNG B√ÅO H·ªÜ TH·ªêNG
          </h2>
          <div className="notifications-list">
            {mockNotifications.map((notif, index) => (
              <div key={index} className="notification-item">
                <div className="notification-title">{notif.title}</div>
                <div className="notification-desc">{notif.desc}</div>
                <div className="notification-date">üìÖ {notif.date}</div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Recent Topics Table */}
      <div className="recent-topics-section">
        <h2>ƒê·ªÄ T√ÄI M·ªöI NH·∫§T</h2>
        <table className="topics-table">
          <thead>
            <tr>
              <th>T√äN ƒê·ªÄ T√ÄI</th>
              <th>SINH VI√äN</th>
              <th>GI·∫¢NG VI√äN H∆Ø·ªöNG D·∫™N</th>
              <th>TR·∫†NG TH√ÅI</th>
            </tr>
          </thead>
          <tbody>
            {mockRecentTopics.map((topic, index) => (
              <tr key={index}>
                <td style={{ maxWidth: "350px", fontWeight: "600" }}>
                  {topic.title}
                </td>
                <td style={{ fontWeight: "500" }}>{topic.student}</td>
                <td style={{ fontWeight: "500" }}>{topic.lecturer}</td>
                <td>
                  <span className={`status-badge ${topic.status}`}>
                    {topic.statusText}
                  </span>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Dashboard;
